extends: eslint:recommended
rules:
  ## Possible Errors
  # 
  # These rules relate to possible syntax or logic errors in JavaScript code:
  # 
  # 
  # disallow assignment operators in conditional expressions  (recommended)
  no-cond-assign: error
  # disallow the use of `console`  (recommended)
  no-console: warn
  # disallow constant expressions in conditions  (recommended)
  no-constant-condition: error
  # disallow control characters in regular expressions  (recommended)
  no-control-regex: error
  # disallow the use of `debugger`  (recommended)
  no-debugger: error
  # disallow duplicate arguments in `function` definitions  (recommended)
  no-dupe-args: error
  # disallow duplicate keys in object literals  (recommended)
  no-dupe-keys: error
  # disallow duplicate case labels  (recommended)
  no-duplicate-case: error
  # disallow empty block statements  (recommended)
  no-empty: error
  # disallow empty character classes in regular expressions  (recommended)
  no-empty-character-class: error
  # disallow reassigning exceptions in `catch` clauses  (recommended)
  no-ex-assign: error
  # disallow unnecessary boolean casts  (recommended)
  no-extra-boolean-cast: error
  # disallow unnecessary parentheses (fixable)
  no-extra-parens: 'off'
  # disallow unnecessary semicolons  (recommended) (fixable)
  no-extra-semi: error
  # disallow reassigning `function` declarations  (recommended)
  no-func-assign: error
  # disallow `function` or `var` declarations in nested blocks  (recommended)
  no-inner-declarations: error
  # disallow invalid regular expression strings in `RegExp` constructors  (recommended)
  no-invalid-regexp: error
  # disallow irregular whitespace outside of strings and comments  (recommended)
  no-irregular-whitespace: error
  # disallow negating the left operand in `in` expressions  (recommended) (deprecated)
  no-negated-in-lhs: 'off'
  # disallow calling global object properties as functions  (recommended)
  no-obj-calls: error
  # Disallow use of `Object.prototypes` builtins directly
  no-prototype-builtins: 'off'
  # disallow multiple spaces in regular expression literals  (recommended)
  no-regex-spaces: error
  # disallow sparse arrays  (recommended)
  no-sparse-arrays: error
  # Disallow template literal placeholder syntax in regular strings
  no-template-curly-in-string: error
  # disallow confusing multiline expressions  (recommended)
  no-unexpected-multiline: error
  # disallow unreachable code after `return`, `throw`, `continue`, and `break` statements  (recommended)
  no-unreachable: error
  # disallow control flow statements in `finally` blocks  (recommended)
  no-unsafe-finally: error
  # disallow negating the left operand of relational operators (recommended) (fixable)
  no-unsafe-negation: error
  # require calls to `isNaN()` when checking for `NaN`  (recommended)
  use-isnan: error
  # enforce valid JSDoc comments
  valid-jsdoc:
  - error
  - prefer:
      return: return
    requireReturn: false
    requireReturnDescription: false
  # enforce comparing `typeof` expressions against valid strings  (recommended)
  valid-typeof: error

  ## Best Practices
  # 
  # These rules relate to better ways of doing things to help you avoid problems:
  # 
  # 
  # enforce getter and setter pairs in objects
  accessor-pairs: 'off'
  # enforce `return` statements in callbacks of array methods
  callback-return:
  - error
  - - cb
    - callback
    - next
  # enforce the use of variables within the scope they are defined
  block-scoped-var: 'off'
  # enforce that class methods utilize `this`
  class-methods-use-this: 'off'
  # enforce a maximum cyclomatic complexity allowed in a program (recommended)
  complexity:
  - error
  - 20
  # require `return` statements to either always or never specify values
  consistent-return: error
  # enforce consistent brace style for all control statements
  curly:
  - error
  - all
  # require `default` cases in `switch` statements
  default-case: error
  # enforce consistent newlines before and after dots
  dot-location: 
  - error
  - property
  # enforce dot notation whenever possible (fixable)
  dot-notation:
  - error
  - allowKeywords: true
  # require the use of `===` and `!==`
  eqeqeq:
  - error
  - smart
  # require `for-in` loops to include an `if` statement
  guard-for-in: error
  # disallow the use of `alert`, `confirm`, and `prompt`
  no-alert: error
  # disallow the use of `arguments.caller` or `arguments.callee`
  no-caller: error
  # disallow lexical declarations in case clauses  (recommended)
  no-case-declarations: error
  # disallow division operators explicitly at the beginning of regular expressions
  no-div-regex: 'off'
  # disallow `else` blocks after `return` statements in `if` statements
  no-else-return: error
  # disallow empty functions
  no-empty-function: 'off'
  # disallow empty destructuring patterns  (recommended)
  no-empty-pattern: error
  # disallow `null` comparisons without type-checking operators
  no-eq-null: 'off'
  # disallow the use of `eval()`
  no-eval: error
  # disallow extending native types
  no-extend-native: error
  # disallow unnecessary calls to `.bind()`
  no-extra-bind: error
  # disallow unnecessary labels
  no-extra-label: 'off'
  # disallow fallthrough of `case` statements  (recommended)
  no-fallthrough: error
  # disallow leading or trailing decimal points in numeric literals (fixable)
  no-floating-decimal: error
  # disallow assignments to native objects or read-only global variables (recommended)
  no-global-assign: error
  # disallow shorthand type conversions (fixable)
  no-implicit-coercion: 'off'
  # disallow `var` and named `function` declarations in the global scope
  no-implicit-globals: 'off'
  # disallow the use of `eval()`-like methods
  no-implied-eval: error
  # disallow `this` keywords outside of classes or class-like objects
  no-invalid-this: error
  # disallow the use of the `__iterator__` property
  no-iterator: error
  # disallow labeled statements
  no-labels: error
  # disallow unnecessary nested blocks
  no-lone-blocks: error
  # disallow `function` declarations and expressions inside loop statements
  no-loop-func: error
  # disallow magic numbers
  no-magic-numbers: 'off'
  # disallow multiple spaces (fixable)
  no-multi-spaces: error
  # disallow multiline strings
  no-multi-str: error
  # disallow reassigning native objects (recommended) (deprecated)
  no-native-reassign: 'off'
  # disallow `new` operators outside of assignments or comparisons
  no-new: error
  # disallow `new` operators with the `Function` object
  no-new-func: error
  # disallow `new` operators with the `String`, `Number`, and `Boolean` objects
  no-new-wrappers: error
  # disallow octal literals  (recommended)
  no-octal: error
  # disallow octal escape sequences in string literals
  no-octal-escape: error
  # disallow reassigning `function` parameters
  no-param-reassign: 'off'
  # disallow the use of the `__proto__` property
  no-proto: error
  # disallow `var` redeclaration  (recommended)
  no-redeclare: error
  # disallow assignment operators in `return` statements
  no-return-assign: error
  # disallow `javascript:` urls
  no-script-url: error
  # disallow assignments where both sides are exactly the same  (recommended)
  no-self-assign: error
  # disallow comparisons where both sides are exactly the same
  no-self-compare: 'off'
  # disallow comma operators
  no-sequences: error
  # disallow throwing literals as exceptions
  no-throw-literal: 'off'
  # disallow unmodified loop conditions
  no-unmodified-loop-condition: error
  # disallow unused expressions
  no-unused-expressions: error
  # disallow unused labels  (recommended)
  no-unused-labels: error
  # disallow unnecessary calls to `.call()` and `.apply()`
  no-useless-call: 'off'
  # disallow unnecessary concatenation of literals or template literals
  no-useless-concat: error
  # disallow unnecessary escape characters
  no-useless-escape: 'off'
  # disallow `void` operators
  no-void: 'off'
  # disallow specified warning terms in comments
  no-warning-comments: warn
  # disallow `with` statements
  no-with: error
  # enforce the consistent use of the radix argument when using `parseInt()`
  radix: error
  # require `var` declarations be placed at the top of their containing scope
  vars-on-top: 'off'
  # require parentheses around immediate `function` invocations
  wrap-iife: error
  # require or disallow "Yoda" conditions
  yoda:
  - error
  - never

  ## Strict Mode
  # 
  # These rules relate to strict mode directives:

  # require or disallow strict mode directives
  strict:
  - error
  - global

  ## Variables
  # 
  # These rules relate to variable declarations:
  # 
  # require or disallow initialization in `var` declarations
  init-declarations: 'off'
  # disallow `catch` clause parameters from shadowing variables in the outer scope
  no-catch-shadow: 'off'
  # disallow deleting variables  (recommended)
  no-delete-var: error
  # disallow labels that share a name with a variable
  no-label-var: error
  # disallow specified global variables
  no-restricted-globals: 'off'
  # disallow `var` declarations from shadowing variables in the outer scope
  no-shadow: error
  # disallow identifiers from shadowing restricted names
  no-shadow-restricted-names: error
  # disallow the use of undeclared variables unless mentioned in `/*global */` comments  (recommended)
  no-undef: error
  # disallow initializing variables to `undefined`
  no-undef-init: error
  # disallow the use of `undefined` as an identifier
  no-undefined: 'off'
  # disallow unused variables  (recommended)
  no-unused-vars:
  - error
  - args: after-used
    vars: all
  # disallow the use of variables before they are defined
  no-use-before-define:
  - error
  - functions: false

  ## Node.js and CommonJS
  # 
  # These rules relate to code running in Node.js, or in browsers with CommonJS:
  # 
  # require `require()` calls to be placed at top-level module scope
  global-require: 'off'
  # require error handling in callbacks
  handle-callback-err:
  - error
  - err
  # disallow `require` calls to be mixed with regular `var` declarations
  no-mixed-requires: error
  # disallow `new` operators with calls to `require`
  no-new-require: error
  # disallow string concatenation with `__dirname` and `__filename`
  no-path-concat: error
  # disallow the use of `process.env`
  no-process-env: 'off'
  # disallow the use of `process.exit()`
  no-process-exit: error
  # disallow specified modules when loaded by `require`
  no-restricted-modules: 'off'
  # disallow certain properties on certain objects
  no-restricted-properties: 'off'
  # disallow synchronous methods
  no-sync: 'off'

  ## Stylistic Issues
  # 
  # These rules relate to style guidelines, and are therefore quite subjective:
  # 
  # enforce consistent spacing inside array brackets (fixable)
  array-bracket-spacing:
  - error
  - never
  # enforce consistent spacing inside single-line blocks (fixable)
  block-spacing: error
  # enforce consistent brace style for blocks
  brace-style:
  - error
  - 1tbs
  # enforce camelcase naming convention
  camelcase:
  - error
  - properties: never
  # require or disallow trailing commas (fixable)
  comma-dangle: error
  # enforce consistent spacing before and after commas (fixable)
  comma-spacing: error
  # enforce consistent comma style (fixable)
  comma-style:
  - error
  - last
  # enforce consistent spacing inside computed property brackets (fixable)
  computed-property-spacing:
  - error
  - never
  # enforce consistent naming when capturing the current execution context
  consistent-this: 'off'
  # enforce at least one newline at the end of files (fixable)
  eol-last: error
  # require or disallow spacing between `function` identifiers and their invocations (fixable)
  func-call-spacing:
  - error
  - never
  # require or disallow named `function` expressions
  func-names: 'off'
  # enforce the consistent use of either `function` declarations or expressions
  func-style:
  - error
  - declaration
  - allowArrowFunctions: true
  # disallow specified identifiers
  id-blacklist: 'off'
  # enforce minimum and maximum identifier lengths
  id-length: 'off'
  # require identifiers to match a specified regular expression
  id-match: 'off'
  # enforce consistent indentation (fixable)
  indent:
  - error
  - 2
  - SwitchCase: 1
  # enforce the consistent use of either double or single quotes in JSX attributes (fixable)
  jsx-quotes: 'off'
  # enforce consistent spacing between keys and values in object literal properties (fixable)
  key-spacing:
  - error
  - afterColon: true
    beforeColon: false
  # enforce consistent spacing before and after keywords (fixable)
  keyword-spacing: error
  # enforce consistent linebreak style (fixable)
  linebreak-style:
  - error
  - unix
  # require empty lines around comments
  lines-around-comment:
  - error
  - afterBlockComment: false
    afterLineComment: false
    beforeBlockComment: true
    beforeLineComment: true
  # require or disallow newlines around directives
  lines-around-directive: 'off'
  # enforce position of line comments
  line-comment-position: 'off'
  # enforce a maximum depth that blocks can be nested
  max-depth: 'off'
  # enforce a maximum line length
  max-len:
  - error
  - code: 120
    ignoreUrls: true
  # enforce a maximum file length
  max-lines: 'off'
  # enforce a maximum depth that callbacks can be nested
  max-nested-callbacks: 'off'
  # enforce a maximum number of parameters in `function` definitions
  max-params: 'off'
  # enforce a maximum number of statements allowed in `function` blocks
  max-statements: 'off'
  # enforce a maximum number of statements allowed per line
  max-statements-per-line: 'off'
  # enforce newlines between operands of ternary expressions
  multiline-ternary: 'off'
  # require constructor `function` names to begin with a capital letter
  new-cap:
  - error
  - newIsCapExceptions:
    - controller
  # require parentheses when invoking a constructor with no arguments (fixable)
  new-parens: error
  # require or disallow an empty line after `var` declarations
  newline-after-var: error
  # require an empty line before `return` statements (fixable)
  newline-before-return: 'off'
  # require a newline after each call in a method chain
  newline-per-chained-call: 'off'
  # disallow `Array` constructors
  no-array-constructor: error
  # disallow bitwise operators
  no-bitwise: 'off'
  # disallow `continue` statements
  no-continue: 'off'
  # disallow inline comments after code
  no-inline-comments: 'off'
  # disallow `if` statements as the only statement in `else` blocks
  no-lonely-if: 'off'
  # disallow mixes of different operators
  no-mixed-operators: 'off'
  # disallow mixed spaces and tabs for indentation  (recommended)
  no-mixed-spaces-and-tabs:
  - error
  - false
  # disallow multiple empty lines (fixable)
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 1
      maxBOF: 0
  # disallow negated conditions
  no-negated-condition: 'off'
  # disallow nested ternary expressions
  no-nested-ternary: error
  # disallow `Object` constructors
  no-new-object: error
  # disallow the unary operators `++` and `--`
  no-plusplus: 'off'
  # disallow specified syntax
  no-restricted-syntax: 'off'
  # disallow spacing between `function` identifiers and their applications (fixable) (deprecated)
  no-spaced-func: 'off'
  # Disallow tabs in file
  no-tabs: 'off'
  # disallow ternary operators
  no-ternary: 'off'
  # disallow trailing whitespace at the end of lines (fixable)
  no-trailing-spaces: error
  # disallow dangling underscores in identifiers
  no-underscore-dangle:
  - error
  - allowAfterThis: true
  # disallow ternary operators when simpler alternatives exist
  no-unneeded-ternary: 'off'
  # disallow whitespace before properties (fixable)
  no-whitespace-before-property: 'off'
  # enforce consistent line breaks inside braces (fixable)
  object-curly-newline:
  - error
  - multiline: true
  # enforce consistent spacing inside braces (fixable)
  object-curly-spacing:
  - error
  - never
  # enforce placing object properties on separate lines
  object-property-newline: 'off'
  # enforce variables to be declared either together or separately in functions
  one-var:
  - error
  - initialized: never
    uninitialized: always
  # require or disallow newlines around `var` declarations
  one-var-declaration-per-line: 'off'
  # require or disallow assignment operator shorthand where possible
  operator-assignment: 'off'
  # enforce consistent linebreak style for operators
  operator-linebreak: 'off'
  # require or disallow padding within blocks (fixable)
  padded-blocks:
  - error
  - classes: always
  # require quotes around object literal property names
  quote-props:
  - error
  - as-needed
  # enforce the consistent use of either backticks, double, or single quotes (fixable)
  quotes:
  - error
  - single
  # require JSDoc comments
  require-jsdoc: 'off'
  # require or disallow semicolons instead of ASI (fixable)
  semi: error
  # enforce consistent spacing before and after semicolons (fixable)
  semi-spacing:
  - error
  - after: true
    before: false
  # requires object keys to be sorted
  sort-keys: 'off'
  # require variables within the same declaration block to be sorted
  sort-vars: 'off'
  # enforce consistent spacing before blocks (fixable)
  space-before-blocks: error
  # enforce consistent spacing before `function` definition opening parenthesis (fixable)
  space-before-function-paren:
  - error
  - never
  # enforce consistent spacing inside parentheses (fixable)
  space-in-parens: error
  # require spacing around operators (fixable)
  space-infix-ops: error
  # enforce consistent spacing before or after unary operators (fixable)
  space-unary-ops:
  - error
  - nonwords: false
    words: true
  # enforce consistent spacing after the `//` or `/*` in a comment (fixable)
  spaced-comment:
  - error
  - always
  - exceptions:
    - '-'
  # require or disallow the Unicode BOM (fixable)
  unicode-bom: 'off'
  # require parenthesis around regex literals (fixable)
  wrap-regex: 'off'

  ## ECMAScript 6
  # 
  # These rules relate to ES6, also known as ES2015:
  # 
  # require braces around arrow function bodies
  arrow-body-style: 'off'
  # require parentheses around arrow function arguments (fixable)
  arrow-parens: 'off'
  # enforce consistent spacing before and after the arrow in arrow functions (fixable)
  arrow-spacing: 'off'
  # require `super()` calls in constructors  (recommended)
  constructor-super: error
  # enforce consistent spacing around `*` operators in generator functions (fixable)
  generator-star-spacing: 'off'
  # disallow reassigning class members  (recommended)
  no-class-assign: error
  # disallow arrow functions where they could be confused with comparisons
  no-confusing-arrow: 'off'
  # disallow reassigning `const` variables  (recommended)
  no-const-assign: error
  # disallow duplicate class members  (recommended)
  no-dupe-class-members: error
  # disallow duplicate module imports
  no-duplicate-imports: error
  # disallow `new` operators with the `Symbol` object  (recommended)
  no-new-symbol: error
  # disallow specified modules when loaded by `import`
  no-restricted-imports: 'off'
  # disallow `this`/`super` before calling `super()` in constructors  (recommended)
  no-this-before-super: error
  # disallow unnecessary computed property keys in object literals
  no-useless-computed-key: 'off'
  # disallow unnecessary constructors
  no-useless-constructor: 'off'
  # disallow renaming import, export, and destructured assignments to the same name (fixable)
  no-useless-rename: error
  # require `let` or `const` instead of `var` (fixable)
  no-var: 'off'
  # require or disallow method and property shorthand syntax for object literals
  object-shorthand: 'off'
  # require arrow functions as callbacks (fixable)
  prefer-arrow-callback: 'off'
  # require `const` declarations for variables that are never reassigned after declared (fixable)
  prefer-const: 'off'
  # disallow `parseInt()` in favor of binary, octal, and hexadecimal literals
  prefer-numeric-literals: error
  # require `Reflect` methods where applicable
  prefer-reflect: 'off'
  # require rest parameters instead of `arguments`
  prefer-rest-params: 'off'
  # require spread operators instead of `.apply()`
  prefer-spread: 'off'
  # require template literals instead of string concatenation
  prefer-template: warn
  # require generator functions to contain `yield` (recommended)
  require-yield: error
  # enforce spacing between rest and spread operators and their expressions (fixable)
  rest-spread-spacing: 'off'
  # enforce sorted import declarations within modules
  sort-imports: 'off'
  # require symbol descriptions
  symbol-description: error
  # require or disallow spacing around embedded expressions of template strings (fixable)
  template-curly-spacing: 'off'
  # require or disallow spacing around the `*` in `yield*` expressions (fixable)
  yield-star-spacing: 'off'
